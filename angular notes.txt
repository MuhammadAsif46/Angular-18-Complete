checking system installed version this packages commands: (CLI)
-----------------------------------
1. Node : node -v
2. Nvm : npm -v
3. Angular : ng v
4. Angular project run -> ng serve 
5. At a time project and browser run -> ng serve --o
6. Already 1 project and another project run add port -> ng serve --port 4203

* package.json file:-
1. Dependencies is a part of deployed build run project packages.
2. devDependencies is a part of localy enviroment run project packages.

* angular.json file:- (angular project configration file):
1. single page application. (index.html)
2. if change file name to change name directory src/<filename> in angular.json file.
3. if project are run first run file (main.ts).

* style.css file:- (angular global styling file):
1. in which styles to use one or more components using style.css global file.

*gitignore file:-
1. Items that you don't want to send to GitHub should be placed in the .gitignore file.
2. If it's a folder, use a slash (/) then folder name and if it's a file, just use the file name.

*Component:-
1. create component command full -> ng generate component <component-name>
2. create component command short -> ng g c <component-name>


*basic Typescript Data Types:
1. String
2. Number
3. Boolean
4. Date

*Data Binding:
    1.One way data binding:
        - One way - from .ts file to .html file using Interpolation in .ts file that is One Way data binding.
        - in which place using variable using Interpolation {{}}.

    2. Property Binding:
        - property binding using [class] in class and passing variable name.
        - any html dom property giving by [].
    
    3. Event Binding:
        - passing data .html to .ts file using event binding.
        - button event passing html property (click) and function name

    * Two way data binding: (ngModel) is using to import ---FormsModule--- :
        - two way data binding in angular using ngModal.
        - ngModal using syntax [(ngModal)].
        - two way data binding means .ts to .html change, .html to .ts change.
        - ngModel only works in jsut input element.

    * Signal (new A-18):
        - it's just like a variable but writing and calling method change.
        - signal call as a method.
        - update to signal variable using .set method.

*Directives:- 
    1. Structural Directive:
        *ngIf - to add to remove element from DOM.
        *ngFor - to create dynamic element.
        *ngSwitch - swich case to dynamic element.

    *ngIf - it need true or false value -- is using to import ---CommonModule--- :
        we can pass value either from
                variable
                comparision
                function
    
    *ngFor - we need to pass only array:  -- is using to import ---CommonModule--- :
        we can pass value either from
                variable
                function
        - in which element is repeat you can use for loop.
        - normally for loop use table data and dropDown element.

    2. Attribute Directive:
        [ngClass] : -- is using to import ---CommonModule--- :
        [ngStyle] : -- is using to import ---CommonModule--- :

*Routing:

    SPA - Single Page Application (React, Angular and Vue.js)
    means only one HTML page render and changes UI different screens.

    1. What is Route Object ?
        {
            path: 'profile', // Mandatory
            component: ProfileComponent, // Mandatory
        },

    2. How to create Routes ?
        {
            path: 'profile', // Mandatory
            component: ProfileComponent, // Mandatory
        },
        {
            path: 'login', // Mandatory
            component: LoginComponent, // Mandatory
        },

    3. How to implement navbar for navigation ?
        - go to main app component and check navbar for navigation.

    4. How to Redirect from one component to other component
        :- from .ts
           -> using routerLink service to navigate one component to other component (use: Router --- service)
              and pass function to call "navigateByUrl('/login')" 
        :- from .html
           -> using routerLink to navigate one component to other component 

    Router-outlet:-

    1. Router outlet is a directive which is used to resposible to render activated route component. 
    2. syntax ---->  <router-outlet></router-outlet>
    3. added anchor(<a>)tag before Augular-17 using href using path but after A-17 using routerLink and add path.
    4. using routerLink first we import app.ts file and add imports in RouterLink  

*Control-Flow-Statement:
    1. What is control flow statement ?
    2. How to write @if, @else and @else if.
        - @if(){}
        - @else if(){}
        - @else{}
    3. How to wrote @for.
        <ul>
            @for (item of items; track $index) {
                <li>{{ item }}</li>
            }
        </ul>
    4. How to write @switch.

*Important Question:-
    - difference between ngIf,ngfor and @if, @for
    ngif or ngfor we are use to import .ts file "commonModule"
    @if or @for we are use don't import .ts file "commonModule"

*Pipes In Angular: why we use (use in data format):
    1- Build in Pipes.
    2- custom pipes.

    -> Build in Pipes:
        - DatePipe -      : Formats a date value according to locale rules.
        - UpperCasePipe - : Transforms text to all upper case.
        - LowerCasePipe - : Transforms text to all lower case.
        - CurrencyPipe -  : Transforms a number to a currency string, formatted according to locale rules.
        - DecimalPipe -   : Transforms a number into a string with a decimal point, formatted according to locale rules.
        - PercentPipe -   : Transforms a number to a percentage string, formatted according to locale rules.
        - AsyncPipe -     : Subscribe and unsubscribe to an asynchronous source such as an observable.
        - JsonPipe -      : just developer usage Display a component object property to the screen as JSON for debugging.

    -> Custom Pipes:
        - custom pipe create command "ng g p <pipeName>" (na) not available:
        - function name transform in custom pipes.

*Template-Form Flow:
    1- first we create a object.
    2- second we bind all objects keys in input field using ngModel.
    3- If your input field is inside a form, then the name attribute is mandatory.
    4- If you want to apply validation, we create a '#property' for that purpose, store 'ngModel' within it, and then apply the desired validation.
    5- If you want to disable the button until the user completes the entire form, you need to add a '#form' property to the form and store 'ngForm' in it. Then, use the invalid property on the button to disable it.

*Reactive-Form Flow:
    1- first we import "ReactiveFormsModule" in .ts file.
    2- second we create form in formControl using validation or not.
    3- If your input field is inside a form, then the name attribute is mandatory.
    4- After this, apply formControl to the parent element inside your HTML, and set its value to the name of your form.
    5- If you want to get the value of the form, you can simply use .value to retrieve it.
    6- If you want to disable the button until the user completes the entire form, you need to add a formGroup property to the form and store 'formGroupName' in it. Then, use the invalid property on the button to disable it.
    7- Then, for each input element, assign the name of your control to the formControlName attribute.

* API Intergration:
    1- What is HttpClient ?
        -> http client is a angular library by default import to use call apis
    2- What are Get, Post, Put, Delete methods ?
        -> GET: Retrieves data from the server without modifying it; used to request and view data.
        -> POST: Sends data to the server to create a new resource; used for adding or submitting data.
        -> PUT: Updates an existing resource on the server with new data; used to modify or replace a resource.
        -> DELETE: Removes a specified resource from the server; used to delete data.

    3- What is API ?
        -> Api is a simple url to hit the server with the request and return the response.
        -> API is a bridge that allows different software systems to talk to each other
    4- Get API 
        -- .http://jsonplaceholder.typicode.com/users
        -- .http://projectapi.gerasim.in/api/RealEstate/GetAllCustomers

    Set-Up:-
    1- first we import provideHttpClient() in app.config.ts file.
    2- second we create constructor use HttpClient object in your component.
    3- third we create function and add api url to string form.
    4- fourth hold api response data in .subscribe() method.

    http import two ways:
        - use inject method ---> "http = inject(HttpClient)"
       1.  Dependency injection:-
        - use constructor method ---> constructor(private http: HttpClient){}

*Services:
    - What is service in Angular ?
        Service is just a file where we keep our reusable code.

    - For what we can use Service ?
        The service is used 80 to 90% for API calls.
        You don't just create functions for APIs in this.
        You can also create reusable functions within it.

    - 2 ways to use service ? (HttpClient)
        to use inject method for angular 16 - this is new way
        to use constructor method for angular before 16
        
    - can we store data in service ?
        Yes we store data in the service.
