checking system installed version this packages commands: (CLI)
-----------------------------------
1. Node : node -v
2. Nvm : npm -v
3. Angular : ng v
4. Angular project run -> ng serve 
5. At a time project and browser run -> ng serve --o
6. Already 1 project and another project run add port -> ng serve --port 4203

* package.json file:-
1. Dependencies is a part of deployed build run project packages.
2. devDependencies is a part of localy enviroment run project packages.

* angular.json file:- (angular project configration file):
1. single page application. (index.html)
2. if change file name to change name directory src/<filename> in angular.json file.
3. if project are run first run file (main.ts).

* style.css file:- (angular global styling file):
1. in which styles to use one or more components using style.css global file.

*gitignore file:-
1. Items that you don't want to send to GitHub should be placed in the .gitignore file.
2. If it's a folder, use a slash (/) then folder name and if it's a file, just use the file name.

*Component:-
1. create component command full -> ng generate component <component-name>
2. create component command short -> ng g c <component-name>


*basic Typescript Data Types:
1. String
2. Number
3. Boolean
4. Date

*Data Binding:
    1.One way data binding:
        - One way - from .ts file to .html file using Interpolation in .ts file that is One Way data binding.
        - in which place using variable using Interpolation {{}}.

    2. Property Binding:
        - property binding using [class] in class and passing variable name.
        - any html dom property giving by [].
    
    3. Event Binding:
        - passing data .html to .ts file using event binding.
        - button event passing html property (click) and function name

    * Two way data binding: (ngModel) is using to import ---FormsModule--- :
        - two way data binding in angular using ngModal.
        - ngModal using syntax [(ngModal)].
        - two way data binding means .ts to .html change, .html to .ts change.
        - ngModel only works in jsut input element.

    * Signal (new A-18):
        - it's just like a variable but writing and calling method change.
        - signal call as a method.
        - update to signal variable using .set method.

*Directives:- 
    1. Structural Directive:
        *ngIf - to add to remove element from DOM.
        *ngFor - to create dynamic element.
        *ngSwitch - swich case to dynamic element.

    *ngIf - it need true or false value -- is using to import ---CommonModule--- :
        if we use ngIf to import "CommonModule"
        we can pass value either from
                variable
                comparision
                function
    
    *ngFor - we need to pass only array:  -- is using to import ---CommonModule--- :
        if we use ngFor to import "CommonModule"
        we can pass value either from
                variable
                function
        - in which element is repeat you can use for loop.
        - normally for loop use table data and dropDown element.

    2. Attribute Directive:
        [ngClass] : -- is using to import ---CommonModule--- :
        [ngStyle] : -- is using to import ---CommonModule--- :

*Routing:

    SPA - Single Page Application (React, Angular and Vue.js)
    means only one HTML page render and changes UI different screens.

    1. What is Route Object ?
        {
            path: 'profile', // Mandatory
            component: ProfileComponent, // Mandatory
        },

    2. How to create Routes ?
        {
            path: 'profile', // Mandatory
            component: ProfileComponent, // Mandatory
        },
        {
            path: 'login', // Mandatory
            component: LoginComponent, // Mandatory
        },

    3. How to implement navbar for navigation ?
        - go to main app component and check navbar for navigation.

    4. How to Redirect from one component to other component
        :- from .ts
           -> using routerLink service to navigate one component to other component (use: Router --- service)
              and pass function to call "navigateByUrl('/login')" 
        :- from .html
           -> using routerLink to navigate one component to other component 

    Router-outlet:-

    1. Router outlet is a directive which is used to resposible to render activated route component. 
    2. syntax ---->  <router-outlet></router-outlet>
    3. added anchor(<a>)tag before Augular-17 using href using path but after A-17 using routerLink and add path.
    4. using routerLink first we import app.ts file and add imports in RouterLink  

*Control-Flow-Statement:
    1. What is control flow statement ?
    2. How to write @if, @else and @else if.
        - @if(){}
        - @else if(){}
        - @else{}
    3. How to wrote @for.
        <ul>
            @for (item of items; track $index) {
                <li>{{ item }}</li>
            }
        </ul>
    4. How to write @switch.

*Important Question:-
    - difference between ngIf,ngfor and @if, @for
    ngif or ngfor we are use to import .ts file "commonModule"
    @if or @for we are use don't import .ts file "commonModule"

*Pipes In Angular: why we use (use in data format):
    1- Build in Pipes.
    2- custom pipes.

    -> Build in Pipes:
        - DatePipe -      : Formats a date value according to locale rules.
        - UpperCasePipe - : Transforms text to all upper case.
        - LowerCasePipe - : Transforms text to all lower case.
        - CurrencyPipe -  : Transforms a number to a currency string, formatted according to locale rules.
        - DecimalPipe -   : Transforms a number into a string with a decimal point, formatted according to locale rules.
        - PercentPipe -   : Transforms a number to a percentage string, formatted according to locale rules.
        - AsyncPipe -     : Subscribe and unsubscribe to an asynchronous source such as an observable.
        - JsonPipe -      : just developer usage Display a component object property to the screen as JSON for debugging.

    -> Custom Pipes:
        - custom pipe create command "ng g p <pipeName>" (na) not available:
        - function name transform in custom pipes.

*Template-Form Flow:
    1- first we create a object.
    2- second we bind all objects keys in input field using ngModel.
    3- If your input field is inside a form, then the name attribute is mandatory.
    4- If you want to apply validation, we create a '#property' for that purpose, store 'ngModel' within it, and then apply the desired validation.
    5- If you want to disable the button until the user completes the entire form, you need to add a '#form' property to the form and store 'ngForm' in it. Then, use the invalid property on the button to disable it.

*Reactive-Form Flow:
    1- first we import "ReactiveFormsModule" in .ts file.
    2- second we create form in formControl using validation or not.
    3- If your input field is inside a form, then the name attribute is mandatory.
    4- After this, apply formControl to the parent element inside your HTML, and set its value to the name of your form.
    5- If you want to get the value of the form, you can simply use .value to retrieve it.
    6- If you want to disable the button until the user completes the entire form, you need to add a formGroup property to the form and store 'formGroupName' in it. Then, use the invalid property on the button to disable it.
    7- Then, for each input element, assign the name of your control to the formControlName attribute.

* API Intergration:
    1- What is HttpClient ?
        -> http client is a angular library by default import to use call apis
    2- What are Get, Post, Put, Delete methods ?
        -> GET: Retrieves data from the server without modifying it; used to request and view data.
        -> POST: Sends data to the server to create a new resource; used for adding or submitting data.
        -> PUT: Updates an existing resource on the server with new data; used to modify or replace a resource.
        -> DELETE: Removes a specified resource from the server; used to delete data.

    3- What is API ?
        -> Api is a simple url to hit the server with the request and return the response.
        -> API is a bridge that allows different software systems to talk to each other
    4- Get API 
        -- .http://jsonplaceholder.typicode.com/users
        -- .http://projectapi.gerasim.in/api/RealEstate/GetAllCustomers

    Set-Up:-
    1- first we import provideHttpClient() in app.config.ts file.
    2- second we create constructor use HttpClient object in your component.
    3- third we create function and add api url to string form.
    4- fourth hold api response data in .subscribe() method.

    http import two ways:
        - use inject method ---> "http = inject(HttpClient)"
       1.  Dependency injection:-
        - use constructor method ---> constructor(private http: HttpClient){}

*Services:
    - What is service in Angular ?
        Service is just a file where we keep our reusable code.

    - For what we can use Service ?
        The service is used 80 to 90% for API calls.
        You don't just create functions for APIs in this.
        You can also create reusable functions within it.

    - 2 ways to use service ? (HttpClient)
        to use inject method for angular 16 - this is new way
        to use constructor method for angular before 16

    - can we store data in service ?
        Yes we store data in the service.

* Input - Output :-

    1. What is reusable component?
        In Angular, reusable components are self-contained units of functionality or UI 
        that can be used across multiple parts of an application with customizable 
        inputs and outputs.
    
    2. What is use of Input?
        The input passes data from the parent to the child.
        steps are follow:
        1. First, import @Input in the .ts file of the reusable component.
        2. Define a variable with @Input() decorator in the reusable component's .ts file to receive data.
        3. In the component where you want to use this reusable component, add the component's selector in the template.
        4. Pass the property value using square brackets [], ensuring the name matches the variable defined in the reusable component's .ts file.
    
    3. What is use of Output?
        The output passes data from the child to the parent.
        steps are follow:
        1. Import @Output and EventEmitter into the reusable component’s .ts file.
        2. Create a function in the reusable component that calls the .emit() method of EventEmitter. You can pass a value inside .emit(value) as an argument, e.g., .emit("hiii everyOne").
        3. In the parent component's template, where you want to use this reusable component, call the component and pass the event name (same as the EventEmitter variable) inside parentheses ().
        4. To catch the emitted value from the reusable component in the parent component, use ($event) inside the parentheses.
        5. Handle the emitted event in the parent component’s .ts file by defining a function to process the emitted value.

* Component Life Cycle Event :-
    1. What are component Life Cycle Events ?
        - A component's lifecycle is the sequence of steps that happen between the component's 
          creation and its destruction. Each step represents a different part of Angular's process 
          for rendering components and checking them for updates over time.
          
    2. How to write Life Cycle Events ?
    3. Sequence of Life Cycle Events ?
        - constructor               : Runs when Angular instantiates the component.
        - ngOnInit                  : Runs once after Angular has initialized all the component's inputs. 
        - ngOnChanges               : Runs every time the component's inputs have changed. 
        - ngDoCheck                 : Runs every time this component is checked for changes.
        - ngAfterContentInit        : Runs once after the component's content has been initialized.
        - ngAfterContentChecked     : Runs every time this component content has been checked for changes. 
        - ngAfterViewInit           : Runs once after the component's view has been initialized. 
        - ngAfterViewChecked        : Runs every time the component's view has been checked for changes.
        - ngOnDestroy               : Runs once before the component is destroyed.
        - afterNextRender           : Runs once the next time that all components have been rendered to the DOM. 
        - afterRender               : Runs every time all components have been rendered to the DOM.

    4. Which Life Cycle Event we mostly use ?
        - ngOnInit
        - ngOnChanges
        - ngOnDestroy
        - ngAfterViewInit

    # constructor Event:
        - The constructor is not a lifecycle event, but whenever we discuss the lifecycle, 
          we should be aware of the constructor.
        - An event that doesn't need to be explicitly called; it automatically triggers when the page reloads.
        - And use the constructor to initialize variables.
        Q: Can we call APIs inside the constructor?
        A: No, we call APIs in ngOnInit.
        
    # OnInit (same as all events ):
        - first we import OnInit function.
        - Second we add class function "implemets OnInit"
        - third we create a new function to name --> ngOnInit(): void {}; 
    
    # OnInit works:
        - ngOnInit purpose is components load honey ky bad ye function automatic call hota hai 
        = normally ngOnInit function hm apis call krne ky liye use krty hai pae load honay pr 

* ng-template directive:
    - What is ng-template ?
        --> ng-template is nothing but a directive 
            for example:- ngIf, ngFor, and ngModel just like that ngTemplate is also a directive
    - How to use ng-template ?
        --> ng-template is used to define a block of HTML that can be rendered dynamically 
            or conditionally. The contents of ng-template are not rendered by default. 
            You can control when and how it is displayed using Angular structural 
            directives or programmatically.
    - In which scenarios we have to use ng-template ?
        - When you want to display some content only when a specific condition is true or false, 
          you can use ng-template.
        - If you need to reuse a template multiple times, you can create and use ng-template.
        - When you need to display dynamic or custom content, such as modals, tabs, 
          or UI elements that render in different places.
        - With ng-template, you render only the templates that are needed, 
          which improves the performance of the app.

* ng-container directive:
    - What is ng-container ?
        ->  ng-container is a logical container that is not rendered in the DOM. 
            It is used to group elements without adding extra nodes to the HTML structure. 
            This directive is useful for applying structural directives like *ngIf, *ngFor, etc., 
            without creating additional elements.
    - How to use ng-container ?
        ->  You can use ng-container to conditionally display or repeat elements without adding 
            extra elements to the DOM.
            It is mostly used to display loaders until our data appears on the screen. 
            It is also called an imaginary tag.
    - how to use ng-template & ng-container together ?
        ->  You can combine ng-template and ng-container to create a more organized structure 
            for displaying content conditionally or dynamically.

* viewChild
    - What is viewChild ?
    -> In Angular, @ViewChild is a decorator used to get a reference to a DOM element 
       or a child component within the parent component's template. It allows you to access 
       and interact with the properties, methods, and events of child components, directives, 
       or DOM elements directly from the parent component class.

    - Create instance of component viewChild ?
    -> To create an instance of a component using @ViewChild in Angular, you don't actually 
       "create" the instance of the component manually; instead, you reference the already 
       created instance of the child component in the parent component.

     - Here’s how you can access an instance of a child component using @ViewChild:

     --Steps to Access Child Component via @ViewChild:
       1. Declare the Child Component in the Parent’s Template: Use the selector of the child 
          component in the parent component’s template.
       2. Use @ViewChild in the Parent Component: Reference the child component class in the 
          parent component.
       3. Access Child Methods or Properties: After Angular has initialized the view, the child 
          component will be accessible and you can call its methods or access its properties.
    
    - Create instance of Html element viewChild ?
    ->  To create an instance of an HTML element using @ViewChild in Angular, you access the native DOM element within your component's template. Angular provides access to the native element using ElementRef, which wraps the DOM element and allows you to interact with it directly.

    --- Steps to Access an HTML Element via @ViewChild:
        1. Add a Template Reference Variable: Add a template reference variable 
            (e.g., #inputElement) in the HTML where you want to reference the DOM element.
        2. Use @ViewChild in the Component Class: Access that DOM element by referencing the 
            template variable using @ViewChild and ElementRef.
        3. Access the DOM Element Methods and Properties: Once Angular initializes the view, 
            you can interact with the native DOM element.

* Decorators
    - What is Decorators ?
        -> A decorator is something that we create in Angular, for example: a class, 
        directive, pipe, component, etc. How does Angular know whether something is a 
        directive or a module? It finds out with the help of decorators. A decorator is a 
        piece of code that helps Angular determine what the element is, whether it's a class,
        pipe, module, or directive.
    
    - Class Decorators ?
        -> Class decorators are the decorators that are created before a class.
           For example: @Component, @Injectable, @Pipe, @Directive, and @NgModule.
    
    - Property Decorators ?
        -> Property decorators are the decorators that are created in front of a variable.
           For example: @Input, @Output, and @HostBinding.
    
    - Method Decorators ?
        -> Method decorators are the decorators that are created before a method.
           For example: @HostListener.
    
    - Parameter Decorators ?
        -> Parameter decorators are used to decorate the parameters of a method in a class. 
           They allow you to add metadata to a method's parameter, such as injecting
           dependencies or customizing how parameters are handled within the method.
           For example: @Inject().

* Login Page:
    - How to implement the login page in Angular.
    - Types of Login
        1. Admin App
        2. Website Login
    - Mode of Login
        1. with hard-code user credentials 
        2. with api Intergration

*Guard
    - What is Guard?
    ->  In Angular, Guards are used to control the navigation and access to routes. 
        They help determine whether a user can access a certain route or not, 
        based on specific conditions like authentication, roles, or other logic.

    - What are types of Guard?
    ->  CanActivate: Checks if a route can be activated.
    ->  CanDeactivate: Checks if a user can leave the route.
    ->  CanActivateChild: Checks if child routes can be activated.
    ->  CanLoad: Prevents lazy-loaded modules from being loaded if the condition is not met.
    
    - How to use canActivate Guard?
    -> To use the CanActivate guard in Angular, follow these steps:
        1. Create the Guard ---> command:- ng generate guard auth
        2. Implement the CanActivate Interface
        3. Apply the Guard to Routes
        4. Test the Guard

*Constant File:
    - How to create the Constant file in angular?
    ->  Create a .ts file (e.g., constants.ts) in your project and export an object 
        containing constant values:
    
    - What to store in constant file?
    ->  Store values that are reused across the app, such as API URLs, configuration 
        settings, default timeouts, or any static data

    - How to read constant file data?
    ->  Import the constant file into any component or service:

---> One more thing Constant:
    Why do we create constants? If you want to display repeated values in a project, 
    show error messages consistently, or show a 'field required' message just once, 
    you can write all the errors in a constants file and call them from there. 
    In production projects, everything comes through the constants file;
    we don't keep things static.

*Class & Interface:
    1. How to create class ?
    --> In TypeScript, a constructor is not strictly necessary within a class to declare variables.
        However, it's commonly used to initialize properties when creating new instances of the class.
    --> To create an instance of a class, you simply use the new keyword followed by the class name.
        The constructor is then called automatically to initialize the object.

    create class syntax:
        -> export class ClassName {
                id: number;
                name: string;

                constructor(){
                    this.id = 0;
                    that.name = "";
                }
            }
    // todo remaining //
    2. How to create interface ?
    interface ky under varible ko declare karny kyliye constructor ki zarort nhi parti wo interface ky under he declare krdeta hai
    create interface syntax:
        -> export interface interfaceNAme {
                id: number,
                name: string,
            }
    interface ky under apko jha ap interface use krty ho usko wahi initailize krna parta hai.

    
    3. when to use class & when to use interface ?
    -- Classes define the structure and behavior of objects. Interfaces define a contract that classes must adhere to, 
       specifying their properties and methods.
        -> creating variable to bind form - class
        -> creating variable to hold array - interface


*Signal:
    1. What is signal ?
    ->  Signals are a new feature in Angular 15 that offer a more reactive and efficient way to manage state and data flow in your applications.
        They provide a simpler and more intuitive approach to state management compared to traditional methods like RxJS.
    
    # Key Benefits of Signals:

    1. Simplified State Management:---> Signals make state management more straightforward, reducing the need for complex RxJS pipelines.
    2. Efficient Updates:---> Signals optimize updates, ensuring that only necessary components are re-rendered.
    3. Improved Performance:---> By minimizing unnecessary re-renders, signals can lead to better performance.
    4. Familiar Syntax:---> Signals use a familiar syntax, making it easier to learn and adopt.
    
    2. How to create signal ?
    import { signal } from '@angular/core';
    
    // Create a signal
    const count = signal(0);
    console.log(count()); // Output: 0

    3. How to update signal ?

    // To update the signal:
    count.update(value => value + 1); // Increment the value by 1
    count.update(value => value * 2); // Double the value

    # Key Points:

    1. Functional Update:---> The update method takes a callback function that receives the current value as an argument.
    2. Immutability:---> The callback function should return the new value. The old value is not directly modified.
    3. Re-rendering:---> Angular's change detection mechanism will automatically re-render components that depend on the signal's value.

    4. How to access signal value ?

    import { signal } from '@angular/core';
    const count = signal(0);
    // To access the current value of the signal:
    const currentValue = count();
    console.log(currentValue); // Output: 0
    
    # Key Point:
    
    1. Function Call:--> To access the current value of a signal, you simply call it like a function.


*Rxjs subject & behaviourSubject:

    1.What is Rxjs?
        -> Rxjs is external library to use Angular to use asencronously behavior by default installed in Angular. 
    2.how to create subject?
        -> import subject from "angular/rxjs".
    3.how to create behaviorSubject?
    4.difference between subject and behaviorSubject?